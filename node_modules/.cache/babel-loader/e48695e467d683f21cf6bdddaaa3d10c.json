{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\n\nexport function provideSaveTreeListPDF(savePDF) {\n  return function (treeList, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) {\n      pdfExportOptions = {};\n    }\n\n    return saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns);\n  };\n}\n\nfunction saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns) {\n  if (pdfExportOptions === void 0) {\n    pdfExportOptions = {};\n  }\n\n  rendertreeList();\n  var treeListOuterWrapper;\n  var treeListInnerWrapper;\n  var finalContainer;\n\n  function rendertreeList() {\n    treeListOuterWrapper = document.createElement('div');\n    treeListOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n    treeListInnerWrapper = document.createElement('div');\n    treeListOuterWrapper.appendChild(treeListInnerWrapper);\n    document.body.appendChild(treeListOuterWrapper);\n    ReactDOM.render(prepareRawTreeListForExport(), treeListInnerWrapper, ontreeListRendered);\n  }\n\n  function ontreeListRendered() {\n    savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n  }\n\n  function cleanUpAndInvokeCallback() {\n    document.body.removeChild(treeListOuterWrapper);\n    document.body.removeChild(finalContainer);\n    treeListOuterWrapper = finalContainer = undefined;\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  function prepareFinalElementForExport() {\n    /* Ultimatelly, there is no need for double DOM-copying of the treeList.\n    The one in this method is a copied Angular implementation\n    that has been plugged almost seemlessly. */\n    finalContainer = document.createElement('div');\n    finalContainer.className = 'k-treelist-pdf-export-element';\n    var result = exportElement(treeListInnerWrapper);\n    finalContainer.appendChild(result);\n    document.body.appendChild(finalContainer);\n    return finalContainer;\n  }\n\n  function prepareRawTreeListForExport() {\n    var customDataProps = pdfExportOptions.allPages && data ? {\n      data: data,\n      take: Number.MAX_VALUE,\n      skip: 0\n    } : {}; // A custom width is needed because otherwise when all pages are exported,\n    // the \"hidden\" PDF treeList will be visible.\n\n    var customStyleProp = {\n      style: Object.assign({}, treeList.props.style, {\n        width: '1000px'\n      })\n    };\n    var customProps = Object.assign({}, customDataProps, customStyleProp);\n\n    if (columns && columns.length > 0) {\n      return React.cloneElement(treeList, Object.assign({}, customProps, {\n        columns: columns\n      }));\n    } else {\n      return React.cloneElement(treeList, customProps);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/vinay/react1/react-js-coding-test-level-1/node_modules/@progress/kendo-react-pdf/dist/es/treelist/provideSaveTreeListPDF.js"],"names":["ReactDOM","React","exportElement","provideSaveTreeListPDF","savePDF","treeList","pdfExportOptions","callback","data","columns","saveTreeListPDF","rendertreeList","treeListOuterWrapper","treeListInnerWrapper","finalContainer","document","createElement","setAttribute","appendChild","body","render","prepareRawTreeListForExport","ontreeListRendered","prepareFinalElementForExport","cleanUpAndInvokeCallback","removeChild","undefined","className","result","customDataProps","allPages","take","Number","MAX_VALUE","skip","customStyleProp","style","Object","assign","props","width","customProps","length","cloneElement"],"mappings":"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","sourcesContent":["import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\nexport function provideSaveTreeListPDF(savePDF) {\n    return function (treeList, pdfExportOptions, callback, data, columns) {\n        if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n        return saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns);\n    };\n}\nfunction saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n    rendertreeList();\n    var treeListOuterWrapper;\n    var treeListInnerWrapper;\n    var finalContainer;\n    function rendertreeList() {\n        treeListOuterWrapper = document.createElement('div');\n        treeListOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n        treeListInnerWrapper = document.createElement('div');\n        treeListOuterWrapper.appendChild(treeListInnerWrapper);\n        document.body.appendChild(treeListOuterWrapper);\n        ReactDOM.render(prepareRawTreeListForExport(), treeListInnerWrapper, ontreeListRendered);\n    }\n    function ontreeListRendered() {\n        savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n    }\n    function cleanUpAndInvokeCallback() {\n        document.body.removeChild(treeListOuterWrapper);\n        document.body.removeChild(finalContainer);\n        treeListOuterWrapper = finalContainer = undefined;\n        if (callback) {\n            callback();\n        }\n    }\n    function prepareFinalElementForExport() {\n        /* Ultimatelly, there is no need for double DOM-copying of the treeList.\n        The one in this method is a copied Angular implementation\n        that has been plugged almost seemlessly. */\n        finalContainer = document.createElement('div');\n        finalContainer.className = 'k-treelist-pdf-export-element';\n        var result = exportElement(treeListInnerWrapper);\n        finalContainer.appendChild(result);\n        document.body.appendChild(finalContainer);\n        return finalContainer;\n    }\n    function prepareRawTreeListForExport() {\n        var customDataProps = pdfExportOptions.allPages && data ? { data: data, take: Number.MAX_VALUE, skip: 0 } : {};\n        // A custom width is needed because otherwise when all pages are exported,\n        // the \"hidden\" PDF treeList will be visible.\n        var customStyleProp = { style: Object.assign({}, treeList.props.style, { width: '1000px' }) };\n        var customProps = Object.assign({}, customDataProps, customStyleProp);\n        if (columns && columns.length > 0) {\n            return React.cloneElement(treeList, Object.assign({}, customProps, { columns: columns }));\n        }\n        else {\n            return React.cloneElement(treeList, customProps);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}