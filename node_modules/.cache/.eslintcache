[{"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\index.js":"1","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\App.js":"2","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\reportWebVitals.js":"3","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\Home.js":"4","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\PokeDex.js":"5","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\Pokemon.js":"6"},{"size":517,"mtime":1647178054275,"results":"7","hashOfConfig":"8"},{"size":415,"mtime":1647796464060,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1647178054276,"results":"10","hashOfConfig":"8"},{"size":1334,"mtime":1647796464061,"results":"11","hashOfConfig":"8"},{"size":10298,"mtime":1647796464062,"results":"12","hashOfConfig":"8"},{"size":207,"mtime":1647796464062,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xcuji2",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\index.js",[],"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\App.js",[],"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\reportWebVitals.js",[],"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\Home.js",[],"C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\PokeDex.js",["27","28","29"],"import \"./App.css\";\r\nimport { useState, useEffect,useRef } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport axios from \"axios\";\r\nimport Modal from \"react-modal\";\r\nimport {BarChart,Bar,XAxis,YAxis,Tooltip,CartesianGrid} from \"recharts\"\r\nimport { PDFExport} from '@progress/kendo-react-pdf';\r\nimport Pokemon from \"./Pokemon\";\r\n\r\n\r\nModal.setAppElement(document.getElementById('root'));\r\n\r\nfunction PokeDex() {\r\n  const [pokemons, setPokemons] = useState([{}]);\r\n  const [isPokemonDetailOpen, setPokemonDetailForOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [nextListURL, setNext] = useState(\"\");\r\n  const [previousListURL, setPrevious]= useState(\"\");\r\n  const [URL, setURL] = useState('https://pokeapi.co/api/v2/pokemon');\r\n  const [sortKey,setSortKey] = useState(\"name\");\r\n  const [sortingDirection, setSortingDirection] = useState(\"ASCENDING\");  \r\n  const [arrow, setArrow] = useState(true);\r\n  const [inputFieldValue, setInputFieldValue] = useState(\"\");\r\n  const [pokemonDetail, setPokemonDetail] = useState({});\r\n  let barArray = [];\r\n   \r\n  const BarChartDetails = () =>{\r\n    return(    \r\n      <div>        \r\n        <table id=\"customers\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Base stat</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody>\r\n            {     \r\n            barArray.map(\r\n              (data, index) => \r\n              {\r\n                return (\r\n                  <tr key={index}>\r\n                    <th>                    \r\n                          {data.key}            \r\n                    </th>\r\n                    <th>                    \r\n                          {data.value}            \r\n                    </th>\r\n                  </tr>\r\n              )})       \r\n          }\r\n          </tbody>\r\n        </table>\r\n\r\n      <br></br>\r\n      <br></br>\r\n                 \r\n      <BarChart width={830} height={250} data={barArray}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"key\" />\r\n        <YAxis />\r\n        <Tooltip />          \r\n        <Bar dataKey=\"value\" fill=\"#8884d8\" />          \r\n      </BarChart>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      background: \"black\",\r\n      color: \"white\",\r\n    },\r\n    overlay: { backgroundColor: \"grey\" },\r\n  };\r\n\r\n  const setBarchartData = (pokemonDetails) =>{\r\n     //console.log(pokemonDetails);\r\n\r\n     \r\n     const data = {...pokemonDetails};\r\n    // console.log(data);\r\n\r\n     for(const d of Object.values(data))\r\n     {\r\n        // console.log(d.stat.name);\r\n        // console.log(d.base_stat);\r\n\r\n        barArray.push({\r\n          key:d.stat.name,\r\n          value:d.base_stat\r\n        })\r\n\r\n     }\r\n     \r\n    \r\n    \r\n      \r\n      //console.log(JSON.stringify(barArray));\r\n  }\r\n\r\n  const getPokemonDetails = async(pokemonName) =>{\r\n\r\n    const data = pokemons.pokemons.results.find((pokemon)=> pokemon.name === pokemonName);\r\n\r\n    await axios.get(data.url)\r\n    .then(response => {\r\n    //console.log(response.data);\r\n    setPokemonDetail({\r\n        p_name : pokemonName.toUpperCase(),\r\n        image : response.data.sprites.front_default,\r\n        stats : response.data.stats\r\n    });\r\n    \r\n    \r\n    }).then(()=>setPokemonDetailForOpen(true)).catch((e)=>{});\r\n\r\n  }\r\n\r\n  const getFilteredRows = (rows, filterKey) => {\r\n    rows =null;\r\n    rows = pokemons.pokemons.results;\r\n    return rows.filter((row) => {\r\n      return Object.values(row).some((s) =>\r\n        (\"\" + s).toLowerCase().includes(filterKey)\r\n      );\r\n    });\r\n  };\r\n\r\n  const sortDirection = () =>{\r\n        if(sortingDirection === \"ASCENDING\")\r\n        {\r\n          setSortingDirection(\"DESCENDING\");\r\n          setArrow(false);\r\n        }\r\n        else{\r\n          setSortingDirection(\"ASCENDING\");\r\n          setArrow(true);\r\n        }\r\n  }\r\n\r\n  const sortPokemonList = (data) =>{\r\n      const unsortedData = {\r\n        ...data\r\n      }\r\n\r\n      unsortedData.pokemons.results.sort((a,b)=>{\r\n        const nameA = a[sortKey];\r\n        const nameB = b[sortKey];\r\n\r\n        if(sortingDirection === \"ASCENDING\")\r\n        {\r\n          if(nameA < nameB) return -1;\r\n          if(nameA > nameB) return 1;\r\n        }\r\n        else{     \r\n          if(nameA > nameB) return -1;\r\n          if(nameA < nameB) return 1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      setSortingDirection(sortDirection);\r\n      setPokemons(unsortedData);\r\n  }\r\n\r\n  const setNextURL = ()=>\r\n  {\r\n    \r\n   \r\n    setURL({URL : nextListURL});\r\n    setInputFieldValue(\"\");\r\n   // alert(nextListURL)\r\n    getPokenmons(nextListURL);\r\n  }\r\n\r\n  const setPreviousURL = ()=>\r\n  {   \r\n    setURL({URL : previousListURL});\r\n    setInputFieldValue(\"\");\r\n   // alert(previousListURL)\r\n    getPokenmons(previousListURL);\r\n  }\r\n\r\n  const getPokenmons = async(URL)=>\r\n  {\r\n    \r\n      await axios.get(URL)\r\n      .then(respose => {\r\n      console.log(respose.data.next);\r\n      setPokemons({pokemons:respose.data});\r\n      setPrevious(respose.data.previous);\r\n      setNext(respose.data.next);\r\n      setIsLoading(false);\r\n      }).catch((e)=>{});\r\n    \r\n    \r\n  }\r\n\r\n  // const setURLS = () =>{\r\n  //   setNext(pokemons.pokemons.next);\r\n  //   setPrevious(pokemons.pokemons.previous)\r\n  // }\r\n\r\n  useEffect(()=>{\r\n    getPokenmons(URL);  \r\n    \r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    //console.log(JSON.stringify(pokemons));\r\n    //getFilteredRows(pokemons.pokemons.results,inputFieldValue);\r\n    \r\n  },[pokemons]);\r\n\r\n  useEffect(()=>{\r\n    setBarchartData(pokemonDetail.stats);\r\n  },[pokemonDetail,barArray])\r\n  //setNext({nextListURL: pokemons.pokemons.next});\r\n  //setPrevious({previousListURL: pokemons.pokemons.previous});\r\n  \r\n  const pdfExportComponent = useRef(null);\r\n  const contentArea = useRef(null);\r\n  \r\n  const handleExportWithComponent = (event) => {\r\n    pdfExportComponent.current.save();\r\n  }\r\n\r\n  if (!isLoading && pokemons.length === 0) {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n          <h1>Welcome to pokedex !</h1>\r\n          <h2>Requirement:</h2>\r\n          <ul>\r\n            <li>\r\n              Call this api:https://pokeapi.co/api/v2/pokemon to get pokedex, and show a list of pokemon name.\r\n            </li>\r\n            <li>Implement React Loading and show it during API call</li>\r\n            <li>when hover on the list item , change the item color to yellow.</li>\r\n            <li>when clicked the list item, show the modal below</li>\r\n            <li>\r\n              Add a search bar on top of the bar for searching, search will run\r\n              on keyup event\r\n            </li>\r\n            <li>Implement sorting and pagingation</li>\r\n            <li>Commit your codes after done</li>\r\n            <li>If you do more than expected (E.g redesign the page / create a chat feature at the bottom right). it would be good.</li>\r\n          </ul>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (    \r\n    <div>\r\n      <header className=\"App-header\">\r\n        \r\n        {isLoading ? (\r\n          <>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                <b>Implement loader here</b>\r\n                <ReactLoading type=\"balls\" color=\"#ffffff\" height={'20%'} width={'20%'}></ReactLoading>\r\n              </header>\r\n            </div>\r\n            \r\n          </>\r\n        ) : (\r\n          <>\r\n            <h1>Welcome to pokedex !</h1>\r\n           \r\n            <div className=\"inline\">\r\n              <button className=\"button button1\" onClick={setPreviousURL}> &laquo; Previous</button>\r\n              <button className=\"button button2\" onClick={ setNextURL} >Next &raquo;</button>\r\n            </div>\r\n            <table id=\"pokemon\">\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n\r\n                  <input type=\"text\" name=\"name\" onChange={(e) => {setInputFieldValue(e.target.value);}} />\r\n                    {arrow ? (<>                    \r\n                      <h5 onClick={()=>{sortPokemonList(pokemons)}}>Name &darr;</h5>                    \r\n                    </>) :(<>\r\n                      <h5 onClick={()=>{sortPokemonList(pokemons)}}>Name &uarr;</h5>\r\n                    </>)}                  \r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {     \r\n              getFilteredRows(pokemons.pokemons.results, inputFieldValue).map(\r\n                (pokemonfilter, index) => \r\n                {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <th>                    \r\n                      <Pokemon key={index} name={pokemonfilter.name} url={pokemonfilter.url} click={(event)=>{getPokemonDetails(event.target.innerText)}}  ></Pokemon>                  \r\n                      </th>\r\n                    </tr>\r\n                )})       \r\n            }\r\n            </tbody>\r\n            </table>            \r\n          </>\r\n        )}\r\n      </header>\r\n      \r\n      {pokemonDetail && (\r\n        \r\n        <Modal\r\n          isOpen={isPokemonDetailOpen}\r\n          contentLabel={pokemonDetail?.name || \"\"}\r\n          onRequestClose={() => {\r\n            setPokemonDetail(null);\r\n          }}         \r\n          style={customStyles}\r\n        >\r\n          <div className=\"pdf-page\">\r\n            <button className=\"button button2\" onClick={()=>{setPokemonDetailForOpen(false)}}> Close </button>\r\n            <button className=\"button button1\" onClick={(event)=>{handleExportWithComponent(event) }}> Download </button>\r\n            <div className=\"app-content\">\r\n            <PDFExport scale={0.6} margin=\"1cm\" ref={pdfExportComponent} paperSize=\"A4\">\r\n            <div ref={contentArea}>\r\n            \r\n            <br></br>\r\n            <br></br>\r\n\r\n            <div className=\"inline\">\r\n              <img src={pokemonDetail.image} alt={pokemonDetail.p_name}/>\r\n            </div>           \r\n            <BarChartDetails/>\r\n            </div>\r\n            </PDFExport>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokeDex;\r\n","C:\\Users\\vinay\\react1\\react-js-coding-test-level-1\\src\\Pokemon.js",[],{"ruleId":"30","severity":1,"message":"31","line":20,"column":18,"nodeType":"32","messageId":"33","endLine":20,"endColumn":28},{"ruleId":"34","severity":1,"message":"35","line":215,"column":5,"nodeType":"36","endLine":215,"endColumn":7,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":225,"column":5,"nodeType":"36","endLine":225,"endColumn":29,"suggestions":"39"},"no-unused-vars","'setSortKey' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'URL'. Either include it or remove the dependency array.","ArrayExpression",["40"],"React Hook useEffect has a missing dependency: 'setBarchartData'. Either include it or remove the dependency array.",["41"],{"desc":"42","fix":"43"},{"desc":"44","fix":"45"},"Update the dependencies array to be: [URL]",{"range":"46","text":"47"},"Update the dependencies array to be: [pokemonDetail, barArray, setBarchartData]",{"range":"48","text":"49"},[5506,5508],"[URL]",[5738,5762],"[pokemonDetail, barArray, setBarchartData]"]